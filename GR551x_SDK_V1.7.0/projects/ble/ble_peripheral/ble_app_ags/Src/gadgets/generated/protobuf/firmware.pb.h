/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.2 */

#ifndef PB_FIRMWARE_PB_H_INCLUDED
#define PB_FIRMWARE_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _FirmwareComponent {
    uint32_t version;
    char name[16];
    uint32_t size;
    char signature[65];
} FirmwareComponent;

typedef struct _UpdateComponentSegment {
    char component_name[16];
    uint32_t component_offset;
    uint32_t segment_size;
    char segment_signature[65];
} UpdateComponentSegment;

typedef struct _FirmwareInformation {
    uint32_t version;
    char name[16];
    pb_size_t components_count;
    FirmwareComponent components[1];
    char locale[8];
    char version_name[16];
} FirmwareInformation;

typedef struct _ApplyFirmware {
    bool has_firmware_information;
    FirmwareInformation firmware_information;
    bool restart_required;
} ApplyFirmware;


/* Initializer values for message structs */
#define FirmwareComponent_init_default           {0, "", 0, ""}
#define FirmwareInformation_init_default         {0, "", 0, {FirmwareComponent_init_default}, "", ""}
#define UpdateComponentSegment_init_default      {"", 0, 0, ""}
#define ApplyFirmware_init_default               {false, FirmwareInformation_init_default, 0}
#define FirmwareComponent_init_zero              {0, "", 0, ""}
#define FirmwareInformation_init_zero            {0, "", 0, {FirmwareComponent_init_zero}, "", ""}
#define UpdateComponentSegment_init_zero         {"", 0, 0, ""}
#define ApplyFirmware_init_zero                  {false, FirmwareInformation_init_zero, 0}

/* Field tags (for use in manual encoding/decoding) */
#define FirmwareComponent_version_tag            1
#define FirmwareComponent_name_tag               2
#define FirmwareComponent_size_tag               3
#define FirmwareComponent_signature_tag          4
#define UpdateComponentSegment_component_name_tag 1
#define UpdateComponentSegment_component_offset_tag 2
#define UpdateComponentSegment_segment_size_tag  3
#define UpdateComponentSegment_segment_signature_tag 4
#define FirmwareInformation_version_tag          1
#define FirmwareInformation_name_tag             2
#define FirmwareInformation_components_tag       3
#define FirmwareInformation_locale_tag           4
#define FirmwareInformation_version_name_tag     5
#define ApplyFirmware_firmware_information_tag   1
#define ApplyFirmware_restart_required_tag       2

/* Struct field encoding specification for nanopb */
#define FirmwareComponent_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   version,           1) \
X(a, STATIC,   SINGULAR, STRING,   name,              2) \
X(a, STATIC,   SINGULAR, UINT32,   size,              3) \
X(a, STATIC,   SINGULAR, STRING,   signature,         4)
#define FirmwareComponent_CALLBACK NULL
#define FirmwareComponent_DEFAULT NULL

#define FirmwareInformation_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   version,           1) \
X(a, STATIC,   SINGULAR, STRING,   name,              2) \
X(a, STATIC,   REPEATED, MESSAGE,  components,        3) \
X(a, STATIC,   SINGULAR, STRING,   locale,            4) \
X(a, STATIC,   SINGULAR, STRING,   version_name,      5)
#define FirmwareInformation_CALLBACK NULL
#define FirmwareInformation_DEFAULT NULL
#define FirmwareInformation_components_MSGTYPE FirmwareComponent

#define UpdateComponentSegment_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   component_name,    1) \
X(a, STATIC,   SINGULAR, UINT32,   component_offset,   2) \
X(a, STATIC,   SINGULAR, UINT32,   segment_size,      3) \
X(a, STATIC,   SINGULAR, STRING,   segment_signature,   4)
#define UpdateComponentSegment_CALLBACK NULL
#define UpdateComponentSegment_DEFAULT NULL

#define ApplyFirmware_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  firmware_information,   1) \
X(a, STATIC,   SINGULAR, BOOL,     restart_required,   2)
#define ApplyFirmware_CALLBACK NULL
#define ApplyFirmware_DEFAULT NULL
#define ApplyFirmware_firmware_information_MSGTYPE FirmwareInformation

extern const pb_msgdesc_t FirmwareComponent_msg;
extern const pb_msgdesc_t FirmwareInformation_msg;
extern const pb_msgdesc_t UpdateComponentSegment_msg;
extern const pb_msgdesc_t ApplyFirmware_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define FirmwareComponent_fields &FirmwareComponent_msg
#define FirmwareInformation_fields &FirmwareInformation_msg
#define UpdateComponentSegment_fields &UpdateComponentSegment_msg
#define ApplyFirmware_fields &ApplyFirmware_msg

/* Maximum encoded size of messages (where known) */
#define FirmwareComponent_size                   95
#define FirmwareInformation_size                 147
#define UpdateComponentSegment_size              95
#define ApplyFirmware_size                       152

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
